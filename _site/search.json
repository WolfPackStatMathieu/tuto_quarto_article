[
  {
    "objectID": "gantt.html",
    "href": "gantt.html",
    "title": "Votre Titre",
    "section": "",
    "text": "import matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.dates as mdates\nfrom datetime import datetime\n\n# Préparer les données\ndata = {\n    'Tâche': [\n        'Introduction à la cybersécurité et\\n renforcement des compétences en ML/DL',\n        'Analyse des besoins, définition des objectifs,\\n identification des sources de données', \n        'Collecte et préparation des jeux de données simulés,\\n analyse exploratoire des données.',\n        'Prototypage et\\n expérimentations avec des algorithmes de détection',\n        'Documentation des résultats (note intermédiaire),\\n planification des prochaines étapes',\n        'Accès aux données réelles, préparation \\n et feature engineering.',\n        'Entraînement des modèles, évaluation \\net optimisation.',\n        'Développement de l\\'outil \\n(backend et frontend).',\n        'Intégration avec le SIEM, automatisation \\net déploiement en production.',\n        'Tests et validation.',\n        'Documentation et formation \\ndes utilisateurs.'\n    ], \n    'Date de début': [\n        '2024-04-01', '2024-04-15', '2024-04-29',\n        '2024-05-20', '2024-06-03', '2024-06-17',\n        '2024-07-01', '2024-07-15', '2024-07-29',\n        '2024-08-12', '2024-08-19'\n    ],\n    'Durée (jours)': [14, 14, 21, 14, 14, 14, 14, 14, 14, 7, 7]\n}\n\n# Convertir les données en DataFrame\ndf = pd.DataFrame(data)\ndf['Date de début'] = pd.to_datetime(df['Date de début'])\ndf['Date de fin'] = df['Date de début'] + pd.to_timedelta(df['Durée (jours)'], unit='d')\n\n# Créer le diagramme de Gantt\nfig, ax = plt.subplots(figsize=(12, 8))\n\nfor i, (task, start, end) in enumerate(zip(df['Tâche'], df['Date de début'], df['Date de fin'])):\n    ax.barh(task, (end - start).days, left=start, height=0.4, align='center')\n    ax.text(start - pd.Timedelta(days=2), i, start.strftime('%Y-%m-%d'), va='center', ha='right')  # Ajouter la date de début\n    ax.text(end + pd.Timedelta(days=1), i, end.strftime('%Y-%m-%d'), va='center', ha='left')  # Ajouter la date de fin\n\n# Configurer les axes\nax.xaxis.set_major_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Tâches')\nplt.title('Diagramme de Gantt Prévisionnel du Stage')\n\n# Ajouter des lignes discrètes entre le texte et les barres horizontales\nfor i in range(len(df)):\n    ax.axhline(y=i, color='grey', linestyle='--', linewidth=0.5, xmin=0.15)\n\n# Ajuster les marges\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.dates as mdates\nfrom datetime import datetime\n\n# Préparer les données\ndata = {\n    'Tâche': [\n        'Introduction à la cybersécurité et\\n renforcement des compétences en ML/DL',\n        'Analyse des besoins, définition des objectifs,\\n identification des sources de données', \n        'Collecte et préparation des jeux de données simulés,\\n analyse exploratoire des données.',\n        'Prototypage et\\n expérimentations avec des algorithmes de détection',\n        'Documentation des résultats (note intermédiaire),\\n planification des prochaines étapes',\n\n    ], \n    'Date de début': [\n        '2024-04-01', '2024-04-15', '2024-04-29',\n        '2024-05-20', '2024-06-03'\n    ],\n    'Durée (jours)': [14, 14, 21, 14, 14]\n}\n\n# Convertir les données en DataFrame\ndf = pd.DataFrame(data)\ndf['Date de début'] = pd.to_datetime(df['Date de début'])\ndf['Date de fin'] = df['Date de début'] + pd.to_timedelta(df['Durée (jours)'], unit='d')\n\n# Créer le diagramme de Gantt\nfig, ax = plt.subplots(figsize=(12, 8))\n\nfor i, (task, start, end) in enumerate(zip(df['Tâche']\n, df['Date de début'], df['Date de fin'])):\n    ax.barh(task, (end - start).days, left=start\n    , height=0.4, align='center')\n    ax.text(start - pd.Timedelta(days=2), i\n    , start.strftime('%Y-%m-%d'), va='center'\n    , ha='right')  # Ajouter la date de début\n    ax.text(end + pd.Timedelta(days=1), i, end.strftime('%Y-%m-%d'), va='center', ha='left')  # Ajouter la date de fin\n\n# Configurer les axes\nax.xaxis.set_major_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m-%d'))\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Tâches')\nplt.title('Diagramme de Gantt Prévisionnel du Stage')\n\n# Ajouter des lignes discrètes entre le texte et les barres horizontales\nfor i in range(len(df)):\n    ax.axhline(y=i, color='grey', linestyle='--', linewidth=0.5, xmin=0.15)\n\n# Ajuster les marges\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\n\n\n\nimport matplotlib.pyplot as plt\nimport pandas as pd\nimport matplotlib.dates as mdates\nfrom datetime import datetime\n\n# Préparer les données pour le premier diagramme de Gantt (échelle complète)\ndata_initial = {\n    'Tâche': [\n        'Introduction à la cybersécurité et\\n renforcement des compétences en ML/DL',\n        'Analyse des besoins, définition des objectifs,\\n identification des sources de données', \n        'Collecte et préparation des jeux de données simulés,\\n analyse exploratoire des données.',\n        'Prototypage et\\n expérimentations avec des algorithmes de détection',\n        'Documentation des résultats (note intermédiaire),\\n planification des prochaines étapes',\n        'Accès aux données réelles, préparation \\n et feature engineering.',\n        'Entraînement des modèles, évaluation \\net optimisation.',\n        'Développement de l\\'outil \\n(backend et frontend).',\n        'Intégration avec le SIEM, automatisation \\net déploiement en production.',\n        'Tests et validation.',\n        'Documentation et formation \\ndes utilisateurs.'\n    ], \n    'Date de début': [\n        '2024-04-01', '2024-04-15', '2024-04-29',\n        '2024-05-20', '2024-06-03', '2024-06-17',\n        '2024-07-01', '2024-07-15', '2024-07-29',\n        '2024-08-12', '2024-08-19'\n    ],\n    'Durée (jours)': [14, 14, 21, 14, 14, 14, 14, 14, 14, 7, 7]\n}\n\n# Convertir les données en DataFrame\ndf_initial = pd.DataFrame(data_initial)\ndf_initial['Date de début'] = pd.to_datetime(df_initial['Date de début'])\ndf_initial['Date de fin'] = pd.to_datetime(df_initial['Date de début']) + pd.to_timedelta(df_initial['Durée (jours)'], unit='d')\n\n# Créer le premier diagramme de Gantt pour l'échelle\nfig, ax = plt.subplots(figsize=(12, 8))\n\nfor i, (task, start, end) in enumerate(zip(df_initial['Tâche'], df_initial['Date de début'], df_initial['Date de fin'])):\n    ax.barh(task, (end - start).days, left=start, height=0.4, align='center')\n    ax.text(start - pd.Timedelta(days=2), i, start.strftime('%d-%m'), va='center', ha='right')  # Ajouter la date de début en inversant mois et jour\n    ax.text(end + pd.Timedelta(days=1), i, end.strftime('%d-%m'), va='center', ha='left')  # Ajouter la date de fin en inversant mois et jour\n\n# Configurer les axes\nax.xaxis.set_major_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m'))\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Tâches')\nplt.title('Diagramme de Gantt Prévisionnel du Stage')\n\n# Ajouter des lignes discrètes entre le texte et les barres horizontales\nfor i in range(len(df_initial)):\n    ax.axhline(y=i, color='grey', linestyle='--', linewidth=0.5, xmin=0.15)\n\n# Ajuster les marges\nplt.tight_layout()\nplt.show()\n\n# Préparer les données pour le deuxième diagramme de Gantt (étapes initiales)\ndata_partial = {\n    'Tâche': [\n        'Introduction à la cybersécurité et\\n renforcement des compétences en ML/DL',\n        'Analyse des besoins, définition des objectifs,\\n identification des sources de données', \n        'Collecte et préparation des jeux de données simulés,\\n analyse exploratoire des données.',\n        'Prototypage et\\n expérimentations avec des algorithmes de détection',\n        'Documentation des résultats (note intermédiaire),\\n planification des prochaines étapes',\n        'Accès aux données réelles, préparation \\n et feature engineering.',\n        'Entraînement des modèles, évaluation \\net optimisation.',\n        'Développement de l\\'outil \\n(backend et frontend).',\n        'Intégration avec le SIEM, automatisation \\net déploiement en production.',\n        'Tests et validation.',\n        'Documentation et formation \\ndes utilisateurs.'\n    ], \n    'Date de début': [\n        '2024-04-01', '2024-04-15', '2024-04-29',\n        '2024-05-20', '2024-06-03', '2024-06-17',\n        '2024-07-01', '2024-07-15', '2024-07-29',\n        '2024-08-12', '2024-08-19'\n    ],\n    'Durée (jours)': [14, 14, 21, 14, 14, 14, 14, 14, 14, 7, 7]\n}\n\n# Convertir les données en DataFrame\ndf_partial = pd.DataFrame(data_partial)\ndf_partial['Date de début'] = pd.to_datetime(df_partial['Date de début'])\ndf_partial['Date de fin'] = df_partial['Date de début'] + pd.to_timedelta(df_partial['Durée (jours)'], unit='d')\n\n# Créer le deuxième diagramme de Gantt à la même échelle\nfig, ax = plt.subplots(figsize=(12, 8))\n\nfor i, (task, start, end) in enumerate(zip(df_partial['Tâche'], df_partial['Date de début'], df_partial['Date de fin'])):\n    if i &lt; 5:  # Colorier les premières 5 barres\n        ax.barh(task, (end - start).days, left=start, height=0.4, align='center')\n    else:  # Dessiner des barres avec bordure pour les tâches non réalisées\n        ax.barh(task, (end - start).days, left=start, height=0.4, align='center', edgecolor='black', fill=False)\n    ax.text(start - pd.Timedelta(days=2), i, start.strftime('%d-%m'), va='center', ha='right')  # Ajouter la date de début en inversant mois et jour\n    ax.text(end + pd.Timedelta(days=1), i, end.strftime('%d-%m'), va='center', ha='left')  # Ajouter la date de fin en inversant mois et jour\n\n# Configurer les axes pour correspondre à ceux du premier diagramme\nax.xaxis.set_major_locator(mdates.MonthLocator())\nax.xaxis.set_major_formatter(mdates.DateFormatter('%d-%m'))\nax.set_xlim([datetime(2024, 4, 1), datetime(2024, 8, 31)])  # Assurer la même échelle de temps\nplt.xticks(rotation=45)\nplt.xlabel('Dates')\nplt.ylabel('Tâches')\nplt.title('Diagramme de Gantt Prévisionnel du Stage - Étapes Initiales')\n\n# Ajouter des lignes discrètes entre le texte et les barres horizontales\nfor i in range(len(df_partial)):\n    ax.axhline(y=i, color='grey', linestyle='--', linewidth=0.5, xmin=0.15)\n\n# Ajuster les marges\nplt.tight_layout()\nplt.show()"
  }
]